#include "arduino_secrets.h"
// Include Libaries: 
#include "thingProperties.h"
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>



// Define Constants:
// Define the display dimension in pixels 
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Define the opening picture dimension in pixels 
#define OPENING_WIDTH 128 // OLED display width, in pixels
#define OPENING_HEIGHT 64 // OLED display height, in pixels

// Define the constants for scrolling 
#define MIN_SCROLL_LINES 7.5 // Minimum value to scroll the text
#define MAX_SCROLL_LINES 4  // Maximum scroll height (in lines)
#define SCROLL_DELAY 1500 // Delay between scroll steps



// Define Global Variables:
// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Declaration of pins 
int photo_pin = A0; // Photoresistor analog pin
int LED_pin = 2; // LED digital pin

int value; // Lux value obtained by photoresistor

// Declaration of the opening image, in bit map 
const unsigned char opening_bmp [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x06, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x07, 0x70, 0x00, 0x1f, 0x00, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0x80, 0x07, 0xf8, 0x07, 0xf8, 0x01, 0xf0, 0x00, 0x0e, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0xc3, 0xff, 0xf8, 0x07, 0xf8, 0x0f, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x5c, 0x0f, 0xf8, 0x03, 0xf0, 0x1c, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0xc0, 0x01, 0xf8, 0x01, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x39, 0x18, 0x60, 0x06, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xc6, 0xc0, 0x00, 0x01, 0x80, 0x00, 0x80, 0x00, 0x00, 0x01, 0x8c, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0x0c, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x80, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 
	0x00, 0x00, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x60, 0x03, 0x00, 0x30, 0x06, 0x00, 0x64, 0x00, 0x00, 
	0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x30, 0x03, 0x11, 0x24, 0x03, 0x00, 0x64, 0x00, 0x00, 
	0x00, 0x00, 0x30, 0x00, 0x18, 0x00, 0x00, 0x30, 0x03, 0x11, 0x46, 0xc1, 0xc0, 0x24, 0x00, 0x00, 
	0x00, 0x00, 0x60, 0x00, 0x1e, 0x00, 0x00, 0x18, 0x03, 0x13, 0xc6, 0x41, 0xe0, 0x34, 0x00, 0x00, 
	0x00, 0x00, 0x40, 0x00, 0x77, 0x00, 0x00, 0x08, 0x03, 0x13, 0xc3, 0x40, 0xfb, 0x7c, 0x00, 0x00, 
	0x00, 0x00, 0xc0, 0x00, 0xe1, 0xc0, 0x00, 0x0c, 0x03, 0x1b, 0x81, 0xa0, 0xed, 0x78, 0x00, 0x00, 
	0x00, 0x00, 0xc0, 0x07, 0x80, 0x7f, 0x00, 0x0c, 0x01, 0x8f, 0xf0, 0xf0, 0xfd, 0x78, 0x00, 0x00, 
	0x00, 0x00, 0x80, 0x1e, 0x00, 0x0f, 0xfc, 0x0c, 0x00, 0xcf, 0xc0, 0x3c, 0x7c, 0x78, 0x00, 0x00, 
	0x00, 0x00, 0x80, 0xfe, 0x00, 0x07, 0x83, 0x8c, 0x00, 0x77, 0xf8, 0x00, 0x78, 0x58, 0x00, 0x00, 
	0x00, 0x00, 0x83, 0xff, 0x00, 0x07, 0x81, 0xcc, 0x00, 0x3c, 0xf8, 0x00, 0x70, 0x70, 0x00, 0x00, 
	0x00, 0x00, 0xc7, 0x3f, 0x00, 0x07, 0x81, 0xce, 0x00, 0x70, 0x78, 0x20, 0x1e, 0x60, 0x00, 0x00, 
	0x00, 0x00, 0xc7, 0x0f, 0x00, 0x00, 0x01, 0xde, 0x00, 0x1c, 0x70, 0x00, 0x3e, 0x60, 0x00, 0x00, 
	0x00, 0x00, 0xc7, 0x00, 0x01, 0x01, 0xf1, 0xfb, 0x00, 0x04, 0xf8, 0x6c, 0x08, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0xe7, 0x0f, 0x80, 0x01, 0xe3, 0x19, 0x80, 0x06, 0x70, 0x30, 0x01, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0xb7, 0x0f, 0x80, 0x00, 0x06, 0x18, 0xc0, 0x03, 0x80, 0x00, 0x07, 0x07, 0x80, 0x00, 
	0x00, 0x01, 0x9f, 0x80, 0x03, 0xc0, 0x0c, 0x0c, 0x60, 0x01, 0xe0, 0x00, 0x3c, 0x07, 0x80, 0x00, 
	0x00, 0x01, 0x13, 0xc0, 0x01, 0x80, 0x38, 0x0c, 0x30, 0x00, 0x3f, 0x83, 0xc0, 0x07, 0x00, 0x00, 
	0x00, 0xe3, 0x10, 0x70, 0x00, 0x00, 0xe0, 0x06, 0x18, 0x00, 0x00, 0xc2, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0xf2, 0x30, 0x1f, 0x00, 0x1f, 0x80, 0x03, 0x8c, 0x00, 0x07, 0xc3, 0xff, 0xff, 0x80, 0x00, 
	0x00, 0xf6, 0x30, 0x01, 0xfe, 0x38, 0x18, 0x08, 0xc6, 0x01, 0xff, 0x00, 0x7c, 0x00, 0xc0, 0x00, 
	0x00, 0x64, 0x60, 0x00, 0x03, 0x38, 0x1c, 0x04, 0x73, 0x1f, 0x8f, 0x00, 0x78, 0x00, 0xe0, 0x00, 
	0x00, 0x0c, 0x64, 0x08, 0x03, 0x1f, 0xff, 0xf3, 0x1f, 0x70, 0x0f, 0x00, 0xf8, 0x00, 0x60, 0x00, 
	0x00, 0x08, 0xcc, 0x08, 0x0e, 0x00, 0x80, 0x39, 0x87, 0xe0, 0x07, 0x80, 0xf0, 0x00, 0x60, 0x00, 
	0x00, 0x19, 0x98, 0x3f, 0xf9, 0x8c, 0xc0, 0x38, 0xc3, 0xe0, 0x07, 0xc1, 0xe0, 0x00, 0x30, 0x00, 
	0x00, 0x13, 0x98, 0x20, 0x19, 0x00, 0xc0, 0x7c, 0x61, 0xe0, 0x03, 0xe1, 0xe0, 0x00, 0x38, 0x00, 
	0x00, 0x13, 0x30, 0x70, 0x18, 0x00, 0xc0, 0xcc, 0x30, 0xf0, 0x01, 0xf3, 0xc0, 0x40, 0x18, 0x00, 
	0x00, 0x16, 0x30, 0x78, 0x04, 0x00, 0xc1, 0x86, 0x18, 0xf0, 0x00, 0xff, 0x80, 0x60, 0x0c, 0x00, 
	0x00, 0x1e, 0x30, 0x46, 0x06, 0x01, 0x81, 0x83, 0x08, 0x70, 0x0c, 0x3f, 0x00, 0x60, 0x04, 0x00, 
	0x00, 0x0e, 0x30, 0xc1, 0xc3, 0x01, 0x83, 0x03, 0x8c, 0x60, 0x0c, 0x00, 0x00, 0x30, 0x3c, 0x00, 
	0x00, 0x0c, 0x30, 0xc0, 0x39, 0x81, 0x82, 0x01, 0xc4, 0xe0, 0x18, 0x00, 0x00, 0x33, 0xe8, 0x00, 
	0x00, 0x0c, 0x30, 0xc0, 0x0e, 0xe3, 0x04, 0x40, 0xe4, 0xc0, 0x18, 0x00, 0x00, 0x1f, 0x0c, 0x00, 
	0x00, 0x0c, 0x30, 0x80, 0x03, 0x7f, 0x18, 0x60, 0x64, 0xff, 0xf1, 0xff, 0xff, 0x0f, 0x8c, 0x00, 
	0x00, 0x0c, 0x18, 0x80, 0x41, 0xe6, 0x30, 0x38, 0x35, 0xe0, 0x3f, 0xfc, 0x3f, 0xf0, 0x6c, 0x00, 
	0x00, 0x0e, 0x19, 0x00, 0xc1, 0xec, 0xc0, 0x1f, 0x1d, 0xe0, 0x78, 0x01, 0xf0, 0x00, 0x0c, 0x00, 
	0x00, 0x06, 0x0f, 0x17, 0x00, 0xff, 0xff, 0xfc, 0x0f, 0x41, 0xc0, 0x1e, 0x00, 0x00, 0x0c, 0x00, 
	0x00, 0x07, 0x06, 0x0f, 0xff, 0xff, 0xc0, 0x0f, 0x06, 0x60, 0x01, 0xff, 0xf8, 0x00, 0x18, 0x00, 
	0x00, 0x03, 0x06, 0x1c, 0x00, 0x3f, 0x80, 0x07, 0xc6, 0x70, 0x1f, 0x80, 0x1f, 0xfe, 0x70, 0x00, 
	0x00, 0x01, 0x87, 0x78, 0x01, 0xe1, 0xff, 0xff, 0xfc, 0x1f, 0xf0, 0x00, 0x00, 0x07, 0xc0, 0x00, 
	0x00, 0x00, 0xc3, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

int scrollLine = 0; // Declaration of the number of scroll line



// Initialization 
void setup() {
  Serial.begin(9600);
  delay(1500);

  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  pinMode(LED_pin, OUTPUT);
  pinMode(photo_pin, INPUT);
  
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  
  display.display(); // Display an empty buffer to clear the display
  
  // Clear the display buffer
  display.clearDisplay();
  delay(1000);
  
  // Display the opening image
  display.drawBitmap(0, 0, opening_bmp, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
  display.display();
}



// Main Loop
void loop() {
  ArduinoCloud.update();

  // Calculate the width of the current message
  double messageLines = message.length() * 12.0 / display.height();
  int message_Lines = ceil(message.length() * 12.0 / display.height());

  // Display the opening image after the message "seen" (when there is no new message)
  if (message == "seen") {
    display.clearDisplay();
    display.drawBitmap(0, 0, opening_bmp, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
    display.display();
  }
  
  // When a new message is coming in
  else {
    display.clearDisplay();
    
    // Check if the text is too long that cannot fit into one screen
    if (messageLines > MIN_SCROLL_LINES) {
      for (int line = 0; line < MAX_SCROLL_LINES; line++) {
        int displayLine = (scrollLine + line) % message_Lines;
        int charIndex = displayLine * (display.width() / 12);
        if (charIndex >= 0 && charIndex < message.length()) {
          display.setTextSize(2);
          display.setTextColor(SSD1306_WHITE);
          display.setCursor(0, line * 16);
          display.println(message.substring(charIndex, charIndex + display.width() / 3));
        }
      }
      
      display.display();
      
      // Increment the scroll line for the next loop iteration
      scrollLine++;
      if (scrollLine >= messageLines) {
        scrollLine = 0; // Reset the scroll line
        delay(SCROLL_DELAY); // Pause before scrolling again
      } else {
        delay(SCROLL_DELAY);
      }
    } else {
      // Display the message without scrolling
      display.setTextSize(2);
      display.setTextColor(SSD1306_WHITE);
      display.setCursor(0, 0);
      display.println(message);
      display.display();
    }
  }
  
  value = analogRead(photo_pin);
  
  // The photoresistor is covered, LED will be turn on and message = seen
  if (value < 5) {
    digitalWrite(LED_pin, LOW);
    delay(10000); 
    message = "seen";
    Serial.println("seen"); 
  } else {
    // The photoresistor is uncovered, LED will be turn off
    digitalWrite(LED_pin, HIGH);
  }
  
  Serial.println(value);
  delay(100);
}



// Functions: 
void onMessageChange() {
  Serial.println(message);
}

void testdrawbitmap(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - OPENING_WIDTH ) / 2,
    (display.height() - OPENING_HEIGHT) / 2,
    opening_bmp, OPENING_WIDTH, OPENING_HEIGHT, 1);
  display.display();
  delay(1000);
}